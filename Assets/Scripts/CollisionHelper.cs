//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
		public class CollisionHelper
		{
			public static Edges getCollisionEdge(Collision2D collision)
			{
				
				ContactPoint2D contactPoint = collision.contacts [0];
				
				Collider2D thisCollider = contactPoint.otherCollider;
				
				float colliderEdgeRight = thisCollider.transform.position.x + thisCollider.bounds.extents.x - 0.1f;
				float colliderEdgeLeft = thisCollider.transform.position.x - thisCollider.bounds.extents.x + 0.1f;
				float colliderEdgeTop = thisCollider.transform.position.y + thisCollider.bounds.extents.y - 0.1f;
				float colliderEdgeBottom = thisCollider.transform.position.y - thisCollider.bounds.extents.y + 0.1f;
				

				if(colliderEdgeTop < contactPoint.point.y)
				{
					return Edges.TOP;
				}else if(colliderEdgeRight < contactPoint.point.x)
				{
					return Edges.RIGHT;
				}else if(colliderEdgeLeft > contactPoint.point.x)
				{
					return Edges.LEFT;
				}else if(colliderEdgeBottom > contactPoint.point.y)
				{
					return Edges.BOTTOM;
				}else
				{
					return Edges.NONE;
				}
				

			}

		public static bool isCollision(Collider2D collider, Edges side)
		{
			float distToGround = collider.bounds.extents.y ;
			float distToFront = collider.bounds.extents.x ;
			Vector3 bottomCenter = collider.transform.position;

			
			RaycastHit2D hit1 = new RaycastHit2D ();
			RaycastHit2D hit2 = new RaycastHit2D ();
			RaycastHit2D hit3 = new RaycastHit2D ();
			
			int layer = 1 << 6;
			layer += 1;
			layer = layer << 2;
			layer = ~layer;
			
			if(Edges.BOTTOM.Equals(side))
			{
				hit1 =  Physics2D.Raycast(bottomCenter + new Vector3(distToFront-0.1f,-(distToGround +0.1f),0),-Vector2.up,0.1f,layer);
				hit2 =  Physics2D.Raycast(bottomCenter + new Vector3(-(distToFront-0.1f),-(distToGround +0.1f),0),-Vector2.up,0.1f,layer);
				hit3 =  Physics2D.Raycast(bottomCenter + new Vector3(0,-(distToGround +0.1f),0),-Vector2.up,0.1f,layer);
			}else if(Edges.TOP.Equals(side))
			{
				hit1 =  Physics2D.Raycast(bottomCenter + new Vector3(distToFront-0.1f,(distToGround +0.1f),0),Vector2.up,0.1f,layer);
				hit2 =  Physics2D.Raycast(bottomCenter + new Vector3(-(distToFront-0.1f),(distToGround +0.1f),0),Vector2.up,0.1f,layer);
				hit3 =  Physics2D.Raycast(bottomCenter + new Vector3(0,(distToGround +0.1f),0),Vector2.up,0.1f,layer);
			}else if(Edges.RIGHT.Equals(side))
			{
				hit1 =  Physics2D.Raycast(bottomCenter + new Vector3(distToFront + 0.1f,0,0) ,Vector2.right,0.1f,layer);
				hit2 =  Physics2D.Raycast(bottomCenter + new Vector3(distToFront + 0.1f,-(distToGround-0.1f),0),Vector2.right,0.1f,layer);
				hit3 =  Physics2D.Raycast(bottomCenter + new Vector3(distToFront + 0.1f,distToGround-0.1f,0),Vector2.right,0.1f,layer);
			}else if(Edges.LEFT.Equals(side))
			{
				hit1 =  Physics2D.Raycast(bottomCenter + new Vector3(-(distToFront + 0.1f),0,0) ,-Vector2.right,0.1f,layer);
				hit2 =  Physics2D.Raycast(bottomCenter + new Vector3(-(distToFront + 0.1f),-(distToGround-0.1f),0),-Vector2.right,0.1f,layer);
				hit3 =  Physics2D.Raycast(bottomCenter + new Vector3(-(distToFront + 0.1f),distToGround-0.1f,0),-Vector2.right,0.1f,layer);
			}
			
			
			if (hit1.collider == null && hit2.collider == null && hit3.collider == null)
			{
				return false;
			}
			else
			{
				return true;
			}
			
			
		}
		}
}

